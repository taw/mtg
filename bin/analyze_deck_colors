#!/usr/bin/env ruby

require "pathname"
require "set"

class CardColors
  attr_reader :uses, :generates
  def colors_path
    Pathname(__dir__) + "../data/colors.tsv"
  end
  def initialize
    @generates = {}
    @uses = {}
    colors_path.readlines.each{|line|
      n, g, u = line.chomp.split(/\t/, 3)
      @generates[n] = Set[*g.split(//)]
      @uses[n] = Set[*u.split(//)]
    }
  end
  def include?(card_name)
    @uses.include?(card_name)
  end
  def self.instance
    @instance ||= new
  end
end

class Deck
  def initialize(list)
    @generates = Set[]
    @uses = Set[]
    @cards = []
    list.each{|line|
      line.strip!
      next unless line =~ /\A(\d+)x?\s*(.*)/
      @cards << [$1.to_i, cleanup_name($2)]
    }
    @cards.each{|cnt, name|
      if CardColors.instance.include?(name)
        @generates |= CardColors.instance.generates[name]
        @uses |= CardColors.instance.uses[name]
      else
        warn "Unknown card: #{name}"
      end
    }
  end
  def cleanup_name(name)
    name = name.dup
    name.gsub!("â€™", "'")
    name.gsub!("Ã†", "AE")
    name.gsub!(/\AAether/, "Aether")
    name.gsub!(%r[\s*(/+|&)\s*], " // ")
    name
  end
  def color
    key = {"w" => 0, "u" => 1, "b" => 2, "r" => 3, "g" => 4, "c" => 5}
    (@generates & @uses).to_a.sort_by{|c| key[c]}.join
  end
end

card_colors = CardColors.new

if ARGV.empty?
  deck = Deck.new(STDIN.readlines)
  puts deck.color
else
  ARGV.each do |path|
    deck = Deck.new(File.readlines(path))
    puts "#{deck.color}\t#{path}"
  end
end
