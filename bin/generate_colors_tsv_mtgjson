#!/usr/bin/env ruby

require "json"
require "set"

class Card
  attr_reader :generated_colors, :used_colors
  def initialize(data)
    @data = data
    @generated_colors = Set[]
    @used_colors = Set[]
    parse_manacost!
    parse_text!
    parse_type!
  end

  def name
    @name ||= cleanup_name(@data["name"])
  end

  def names
    @names ||= if @data["names"]
      @data["names"].map{|n| cleanup_name(n)}
    else
      [name]
    end
  end

  def manacost
    @manacost ||= (@data["manaCost"] || "").downcase
  end

  def type
    @type ||= @data["type"] || ""
  end

  def text
    @text ||= @data["text"] || ""
  end

  def cleanup_name(name)
    name = name.dup
    name.gsub!("’", "'")
    name.gsub!("Æ", "Ae")
    name.gsub!(/\AAether/, "Aether")
    name.gsub!(%r[\s*(/+|&)\s*], " // ")
    name
  end

  def simplify_colors!
    key = {"w" => 0, "u" => 1, "b" => 2, "r" => 3, "g" => 4, "c" => 5}
    @generated_colors = @generated_colors.join.gsub(/[^wubrg]/, "").split(//).uniq.sort_by{|c| key[c]}.join
    @used_colors = @used_colors.join.gsub(/[^wubrgc]/, "").split(//).uniq.sort.sort_by{|c| key[c]}.join
  end

  def add_gen!(gen)
    gen = gen.sub("h", "")
    case gen
    when /\A(\d+|x|y|z|∞)\z/
      # skip
    when /\A[wubrgc]\z/
      @generated_colors << gen
    else
      raise "Unrecognized cost #{gen}"
    end
  end

  def add_cost!(cost)
    cost = cost.sub("2/", "").sub("/p", "").sub("h", "")
    case cost
    when /\A(\d+|x|y|z|s|½|t|q|p)\z/
      # skip
    when /\A[wubrgc]\z/
      @used_colors << cost
    when /\A([wubrg])\/([wubrg])\z/
      @used_colors << $1 << $2
    else
      raise "Unrecognized cost #{cost}"
    end
  end

  def parse_manacost!
    manacost.gsub(/\A\{|\}\z/,"").split("}{").each do |cost|
      add_cost! cost
    end
  end

  def parse_cost!(costs)
    raise "WTF COST? #{costs}" if costs =~ /mana pool/ and costs =~ /\{/
    costs.scan(/\{(.*?)\}/).flatten.map(&:downcase).each do |cost|
      add_cost! cost
    end
  end

  def parse_effect!(effect)
    effect.scan(/\{(.*?)\}/).flatten.map(&:downcase).each do |gen|
      add_gen! gen
    end
    @generated_colors += ["w", "u", "b", "r", "g"] if effect =~ /any/
  end

  def parse_text!
    text.split("\n").each{|line|
      line.gsub!(/\{(\d+|X|T)\}/){ $1 }
      @used_colors << "w" << "b" if line =~ /\bExtort\b/i
      next unless line =~ /\{|mana/
      # This is sort of dubious
      if line.sub!(/Adds? (.*) to (?:your|his or her|that player's) mana pool/i, "")
        parse_effect! $1
      end
      if line.sub!(/Add to (?:your|his or her) mana pool (.*)/i, "")
        parse_effect! $1
      end
      parse_cost! line
    }
  end

  def parse_type!
    @generated_colors << "w" if @type =~ /\bPlains\b/i
    @generated_colors << "u" if @type =~ /\bIsland\b/i
    @generated_colors << "b" if @type =~ /\bSwamp\b/i
    @generated_colors << "r" if @type =~ /\bMountain\b/i
    @generated_colors << "g" if @type =~ /\bForest\b/i
  end
end

class CardDatabase
  def initialize
    @cards = Set[]
    @parts = {}
  end

  def import!
    data = JSON.parse(open("AllSets-x.json").read)
    data.each do |set_code, set|
      set["cards"].each do |card|
        add_card! card
      end
    end
  end

  def add_card!(card_data)
    part = Card.new(card_data)
    @cards << part.names
    @parts[part.name] = part
  end

  def format_mana(mana)
    order = {"w"=>0, "u"=>1, "b"=>2, "r"=>3, "g"=>4, "c"=>5}
    mana.sort_by{|c| order.fetch(c) }.join
  end

  def each_part
    @parts.values.each do |card|
      yield(card.name, format_mana(card.generated_colors), format_mana(card.used_colors))
    end
  end

  def each_card
    @cards.each do |parts|
      gen = format_mana(parts.map{|c| @parts[c].generated_colors}.inject(&:|))
      used = format_mana(parts.map{|c| @parts[c].used_colors}.inject(&:|))
      parts.each do |p|
        yield(p, gen, used)
      end
      if parts.size == 2
        yield parts.join(" // "), gen, used
        yield parts.reverse.join(" // "), gen, used
      end
      if parts.size > 2
        yield parts.join(" // "), gen, used
      end
    end
  end

  def print!
    enum_for(:each_card).sort.each do |name, gen, use|
      puts [name, gen, use].join("\t")
    end
  end

  def run!
    import!
    print!
  end
end

CardDatabase.new.run!
