#!/usr/bin/env ruby

require_relative "../lib/mtg"

class Cockarice2MageConverter
  def initialize(input_path, output_path)
    @input_path  = input_path
    @output_path = output_path
  end

  def convert!(source_path, target_path)
    parser = CockatriceDeckParser.new
    parser.parse!(source_path.read)
    if parser.deck.mage_compatible?
      parser.deck.save_as_dck!(target_path)
    else
      warn "Deck uses card not in mage: #{source_path}, skipping"
    end
  end

  def map_path(path)
    @output_path +
      path.relative_path_from(@input_path).dirname +
      "#{path.basename(".cod")}.dck"
  end

  def run!
    if @input_path.is_a?(IO)
      convert!(@input_path, @output_path)
    elsif @input_path.directory?
      @input_path.find do |source_path|
        next if source_path.directory?
        target_path = map_path(source_path)
        next if target_path.exist?
        target_path.parent.mkpath
        convert!(source_path, target_path)
      end
    else
      convert!(@input_path, @output_path)
    end
  end
end

if ARGV.size == 2
  input_path = Pathname(ARGV[0])
  output_path = Pathname(ARGV[1])

  Cockarice2MageConverter.new(input_path, output_path).run!
elsif ARGV.size == 0
  Cockarice2MageConverter.new(STDIN, STDOUT).run!
else
  STDERR.puts "Converts cockatrice to mage format"
  STDERR.puts "Usage #{$0} deck.cod deck.dck"
  STDERR.puts "   or #{$0} cod_folder/ dck_folder/"
  STDERR.puts "   or #{$0} <deck.cod >deck.dck"
  exit 1
end
